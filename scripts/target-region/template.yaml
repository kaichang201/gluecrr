AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "AWS Glue Data Catalog Replication Utility - Target Account"

Parameters:
  pSnsTopicArn:
    Description: "ARN for Source SNS Topic"
    Type: String
    Default: awsSNSTopicArnExample
  pSnsTopicRegion:
    Description: "Region for Source SNS Topic"
    Type: String
    Default: ""
  pKmsKeyARNSQS:
    Description: "KMS Key ARN for SQS Queue"
    Type: String
    Default: ""
  pKmsKeyARNSNS:
    Description: "KMS Key ARN for SNS Topic"
    Type: String
    Default: ""
  pS3SourceToTargetMapList:
    Description: "List of Mappings from Source Region's S3 Bucket to Target Region's S3 Bucket"
    Type: String
    Default: ""
  pS3SourceToTargetMapListSeparator:
    Description: "Separator for List of Mappings"
    Type: String
    Default: ","
  pS3SourceToTargetMapListValuesSeparator:
    Description: "Separator for Values Region|SourceS3Bucket|TargetS3Bucket"
    Type: String
    Default: "|"



Resources:
#    ### DynamoDB ###
#    rDBStatus:
#      Type: "AWS::DynamoDB::Table"
#      Properties:
#          TableName: "db_status"
#          BillingMode: "PAY_PER_REQUEST"
#          AttributeDefinitions:
#            - AttributeName: "db_id"
#              AttributeType: "S"
#            - AttributeName: "import_run_id"
#              AttributeType: "N"
#          KeySchema:
#            -
#              AttributeName: "db_id"
#              KeyType: "HASH"
#            -
#              AttributeName: "import_run_id"
#              KeyType: "RANGE"
#
#    rTableStatus:
#      Type: "AWS::DynamoDB::Table"
#      Properties:
#          TableName: "table_status"
#          BillingMode: "PAY_PER_REQUEST"
#          AttributeDefinitions:
#            - AttributeName: "table_id"
#              AttributeType: "S"
#            - AttributeName: "import_run_id"
#              AttributeType: "N"
#          KeySchema:
#            -
#              AttributeName: "table_id"
#              KeyType: "HASH"
#            -
#              AttributeName: "import_run_id"
#              KeyType: "RANGE"

    ### SQS ###
    rGlueMetadataCRRSQSSubscriberToSNS:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "GlueMetadataCRRSQSSubscriberToSNS"
        VisibilityTimeout: 900
        KmsMasterKeyId: !Ref pKmsKeyARNSQS

    ### SNS Subscription ###
    SnsSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt rGlueMetadataCRRSQSSubscriberToSNS.Arn
        Region: !Ref pSnsTopicRegion
        TopicArn: !Ref pSnsTopicArn
#    rDeadLetterQueue:
#      Type: 'AWS::SQS::Queue'
#      Properties:
#        QueueName: "DeadLetterQueue"
#        VisibilityTimeout: 195
#        KmsMasterKeyId: !Ref pKmsKeyARNSQS

    ### SQS Queue Policy to allow SNS to push messages onto SQS ###
    rGlueMetadataCRRQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref rGlueMetadataCRRSQSSubscriberToSNS
        PolicyDocument:
          Statement:
            - Sid: Allow-SNS-SendMessage
              Effect: "Allow"
              Principal:
                AWS: "*"
              Action:
                - "SQS:SendMessage"
              Resource: !GetAtt rGlueMetadataCRRSQSSubscriberToSNS.Arn
              Condition:
                ArnLike:
                  aws:SourceArn: !Ref pSnsTopicArn

  ### IAM ###
    rGlueCatalogReplicationPolicyRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action:
                - "sts:AssumeRole"
        Path: "/"
        ManagedPolicyArns: 
          - "arn:aws:iam::aws:policy/AWSLambdaExecute"
        Policies:
          - PolicyName: GlueCatalogReplicationPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                  - "glue:SearchTables"
                  - "glue:BatchCreatePartition"
                  - "glue:GetDataCatalogEncryptionSettings"
                  - "glue:GetTableVersions"
                  - "glue:GetPartitions"
                  - "glue:BatchDeletePartition"
                  - "glue:DeleteTableVersion"
                  - "glue:UpdateTable"
                  - "glue:GetSecurityConfiguration"
                  - "glue:GetResourcePolicy"
                  - "glue:GetTableVersion"
                  - "glue:CreatePartition"
                  - "glue:UpdatePartition"
                  - "glue:UpdateDatabase"
                  - "glue:CreateTable"
                  - "glue:GetTables"
                  - "glue:BatchGetPartition"
                  - "glue:GetSecurityConfigurations"
                  - "glue:GetDatabases"
                  - "glue:GetTable"
                  - "glue:GetDatabase"
                  - "glue:GetPartition"
                  - "glue:CreateDatabase"
                  - "glue:BatchDeleteTableVersion"
                  - "glue:DeletePartition"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "sqs:DeleteMessage"
                  - "sqs:ListQueues"
                  - "sqs:GetQueueUrl"
                  - "sqs:ListDeadLetterSourceQueues"
                  - "sqs:ChangeMessageVisibility"
                  - "sqs:DeleteMessageBatch"
                  - "sqs:SendMessageBatch"
                  - "sqs:ReceiveMessage"
                  - "sqs:SendMessage"
                  - "sqs:GetQueueAttributes"
                  - "sqs:ListQueueTags"
                Resource: 
                  - '*'
              - Effect: Allow
                Action:
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:PutItem"
                Resource: 
                  - "*"

    ### Lambda ###
    rImportGlueDataCatalog:
      Type: "AWS::Serverless::Function"
      Properties:
        CodeUri: ../../target/gluecrr-0.0.1.jar
        FunctionName: "ImportGlueDataCatalog"
        Environment:
          Variables:
            region: !Ref 'AWS::Region'
            target_glue_catalog_id: !Ref 'AWS::AccountId'
            S3SourceToTargetMapList: !Ref pS3SourceToTargetMapList
            S3SourceToTargetMapListSeparator: !Ref pS3SourceToTargetMapListSeparator
            S3SourceToTargetMapListValuesSeparator: !Ref pS3SourceToTargetMapListValuesSeparator
            skip_archive: "true"
        Handler: org.kai.lambda.ImportGlueDataCatalog
        Runtime: java8
        Description: "Import Glue Data Catalog metadata"
        MemorySize: 512
        Timeout: 300
        Role: !GetAtt rGlueCatalogReplicationPolicyRole.Arn

#    rImportLargeTableLambda:
#      Type: "AWS::Serverless::Function"
#      Properties:
#        CodeUri: ../aws-glue-data-catalog-replication-utility-1.0.0.jar
#        FunctionName: "ImportLargeTableLambda"
#        Environment:
#          Variables:
#            target_glue_catalog_id: !Ref 'AWS::AccountId'
#            ddb_name_table_import_status: !Ref rTableStatus
#            skip_archive: "true"
#            region: !Ref 'AWS::Region'
#        Handler: com.amazonaws.gdcreplication.lambda.ImportLargeTable
#        Runtime: java8
#        Description: "Import Large Table Lambda"
#        MemorySize: 512
#        Timeout: 180
#        Role: !GetAtt rGlueCatalogReplicationPolicyRole.Arn
#

#
#    rDLQProcessorLambda:
#      Type: "AWS::Serverless::Function"
#      Properties:
#        CodeUri: ../aws-glue-data-catalog-replication-utility-1.0.0.jar
#        FunctionName: "DLQProcessorLambda"
#        Environment:
#          Variables:
#            target_glue_catalog_id: !Ref 'AWS::AccountId'
#            ddb_name_db_import_status: !Ref rDBStatus
#            ddb_name_table_import_status: !Ref rTableStatus
#            skip_archive: "true"
#            dlq_url_sqs: !Ref rDeadLetterQueue
#            region: !Ref 'AWS::Region'
#        Handler: com.amazonaws.gdcreplication.lambda.DLQImportDatabaseOrTable
#        Runtime: java8
#        Description: "DLQ Lambda"
#        MemorySize: 512
#        Timeout: 180
#        Role: !GetAtt rGlueCatalogReplicationPolicyRole.Arn
#
#    rDLQProcessorLambdaSQSPermission:
#      Type: AWS::Lambda::EventSourceMapping
#      Properties:
#        BatchSize: 1
#        Enabled: True
#        EventSourceArn: !GetAtt rDeadLetterQueue.Arn
#        FunctionName: !GetAtt rDLQProcessorLambda.Arn

    ### Event Source Mapping.  Allows SQS to trigger Lambda functions ###
    rImportLargeTableLambdaSQSPermission:
      Type: AWS::Lambda::EventSourceMapping
      Properties:
        BatchSize: 1
        Enabled: True
        EventSourceArn: !GetAtt rGlueMetadataCRRSQSSubscriberToSNS.Arn
        FunctionName: !GetAtt rImportGlueDataCatalog.Arn
